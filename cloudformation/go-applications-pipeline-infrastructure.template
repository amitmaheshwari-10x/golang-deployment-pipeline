Description: >

    Infrastructure - Deployment Pipeline for Go Applications on AWS.
    This will deploy a highly available Auto Scaling Group of EC2 instances with the CodeDeploy agent installed ready for application deployments. It will use an existing VPC with public and private 
    subnets. An Application Load Balancer is placed in the public subnets, which forwards traffic to the
    application servers in the private subnets.


Parameters:

    # The following parameters are set dynamically by AWS CodePipeline 

    KeyName:
        Type: String
        Default: amit-saas-test
        
    ApplicationName:
        Type: String

    EnvironmentName:
        Type: String

    ArtifactS3Bucket:
        Type: String

    # All parameters below can be overridden on a per environment basis in config/*

    InstanceType:
        Description: The instance type to deploy to
        Type: String
        Default: t2.micro

    InstanceCount: 
        Description: How many instances should the AutoScaling Group contain
        Type: Number
        Default: 2

    DeploymentStrategy:
        Description: The CodeDeploy deployment strategy to user
        Type: String
        Default: CodeDeployDefault.OneAtATime

    VpcID: 
        Description: Please enter the VPC ID
        Type: String



    PrivateSubnet1ID:
        Description: Please enter the ID for the private subnet in the first Availability Zone
        Type: String
        

    PrivateSubnet2ID:
        Description: Please enter the ID for the private subnet in the second Availability Zone
        Type: String
   
    TargetGroup:
        Description: Please enter the Target Group ARN
        Type: String
        Default: arn:aws:elasticloadbalancing:us-east-2:750614379083:targetgroup/Test-Test/aeaa85ec9fa08f37
        

Mappings: 

    # Amazon Linux AMI 2016.09.1, released on 2016-12-22
    # https://aws.amazon.com/amazon-linux-ami/

    AWSRegionToAMI:
        us-east-1:
            AMI: ami-9be6f38c
        us-east-2:
            AMI: ami-38cd975d
        us-west-1:
            AMI: ami-1e299d7e
        us-west-2:
            AMI: ami-b73d6cd7
        ca-central-1:
            AMI: ami-eb20928f
        eu-west-1:
            AMI: ami-c51e3eb6
        eu-west-2:
            AMI: ami-bfe0eadb
        eu-central-1:
            AMI: ami-211ada4e
        ap-southeast-1:
            AMI: ami-4dd6782e
        ap-northeast-2:
            AMI: ami-94bb6dfa
        ap-northeast-1:
            AMI: ami-9f0c67f8
        ap-southeast-2:
            AMI: ami-28cff44b
        ap-south-1:
            AMI: ami-9fc7b0f0
        sa-east-1:
            AMI: ami-bb40d8d7
    
    # CodeDeploy installer bucket list sourced from:
    # http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-set-up-new-instance.html
    
    CodeDeployInstallerBuckets:
        us-east-1:
            Bucket: aws-codedeploy-us-east-1
        us-east-2:
            Bucket: aws-codedeploy-us-east-2
        us-west-1:
            Bucket: aws-codedeploy-us-west-1
        us-west-2:
            Bucket: aws-codedeploy-us-west-2
        ca-central-1:
            Bucket: aws-codedeploy-ca-central-1
        eu-west-1:
            Bucket: aws-codedeploy-eu-west-1
        eu-west-2:
            Bucket: aws-codedeploy-eu-west-2
        eu-central-1:
            Bucket: aws-codedeploy-eu-central-1
        ap-northeast-1:
            Bucket: aws-codedeploy-ap-northeast-1
        ap-northeast-2:
            Bucket: aws-codedeploy-ap-northeast-2
        ap-southeast-1:
            Bucket: aws-codedeploy-ap-southeast-1
        ap-southeast-2:
            Bucket: aws-codedeploy-ap-southeast-2
        ap-south-1:
            Bucket: aws-codedeploy-ap-south-1
        sa-east-1:
            Bucket: aws-codedeploy-sa-east-1


Resources:

    ###########################################
    # AutoScaling Group
    ###########################################

    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier: 
                - !Ref PrivateSubnet1ID
                - !Ref PrivateSubnet2ID 
            LaunchConfigurationName: !Ref LaunchConfiguration
            TargetGroupARNs: 
                - !Ref TargetGroup
            MinSize: !Ref InstanceCount
            MaxSize: !Ref InstanceCount
            DesiredCapacity: !Ref InstanceCount
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal: 
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true
        
    LaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            KeyName: !Sub ${KeyName}
            SpotPrice: 100
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
            InstanceType: !Ref InstanceType
            IamInstanceProfile: !Ref InstanceProfile
            SecurityGroups: 
                - !Ref ApplicationSecurityGroup
            UserData: !
                "Fn::Base64": !Sub 
                    - |+
                        #!/bin/bash

                        # Set up a CloudFormation wait signal, so we can notify when the CodeDeploy agent is running
                        yum install -y aws-cfn-bootstrap
                        /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
                        
                        # Install CodeDeploy agent
                        yum -y update
                        yum install -y ruby
                        cd /home/ec2-user
                        curl -O https://${InstallerBucket}.s3.amazonaws.com/latest/install
                        chmod +x ./install
                        ./install auto

                        # Send a success/failure signal to CloudFormation based on the exit status of the last command
                        /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
                    - InstallerBucket:
                        Fn::FindInMap: [ CodeDeployInstallerBuckets, !Ref "AWS::Region", Bucket]

    ###########################################
    # Load Balancer
    ###########################################

    #TargetGroup:
    #    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    #    Properties:
    #        Name: !Sub ${ApplicationName}-${EnvironmentName}
    #        VpcId: !Ref VpcID
    #        Port: 8000
    #        Protocol: HTTP

    ###########################################
    # CodeDeploy
    ###########################################

    CodeDeployDeploymentGroup:
        Type: AWS::CodeDeploy::DeploymentGroup
        Properties:
            DeploymentGroupName: !Ref EnvironmentName
            DeploymentConfigName: !Ref DeploymentStrategy
            ServiceRoleArn: 
                Fn::ImportValue:
                    !Sub CodeDeployServiceRoleArn-${ApplicationName}
            ApplicationName: 
                Fn::ImportValue:
                    !Sub CodeDeployApplication-${ApplicationName} 
            AutoScalingGroups:
                - !Ref AutoScalingGroup
    
    ###########################################
    # Security Groups
    ###########################################
    
    ApplicationSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VpcID
            GroupDescription: Controls who can access the application servers
            SecurityGroupIngress:
                # Only allow in bound from the load balancer
                - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup 
                  IpProtocol: -1
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}-ApplicationServers

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            VpcId: !Ref VpcID
            GroupDescription: Controls who can access the load balancer
            SecurityGroupIngress:
                # Allow access from anywhere
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
            Tags: 
                - Key: Name
                  Value: !Sub ${ApplicationName}-${EnvironmentName}-LoadBalancers

    ###########################################
    # IAM
    ###########################################

    InstanceRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: !Sub ${ApplicationName}-${EnvironmentName}-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*"
                            ],
                            "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}/${ApplicationName}/*" ]
                        }]
                    }

    InstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref InstanceRole
